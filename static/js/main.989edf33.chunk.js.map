{"version":3,"sources":["components/Header.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","position","MapboxGLMap","useState","map","setMap","mapContainer","useRef","setStyle","firstrun","setFirstRun","number","setNumber","useEffect","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","resize","initializeMap","console","log","setCenter","setZoom","onClick","Math","random","round","ref","el","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uLAEMA,G,MAAS,CACXC,OAAQ,OACRC,MAAO,QACPC,QAAS,OACTC,UAAW,SACXC,SAAU,SAWCC,EARA,WACX,OACI,yBAAKC,MAAOP,GACR,gCAAQ,kDAAR,O,uBCTNA,G,MAAS,CACbE,MAAO,OACPD,OAAQ,qBACRO,SAAU,aAyEGC,EAtEK,WAAO,IAAD,EACFC,mBAAS,MADP,mBACjBC,EADiB,KACZC,EADY,KAElBC,EAAeC,iBAAO,MAFJ,EAGEJ,mBAAS,eAHX,mBAGjBH,EAHiB,KAGVQ,EAHU,OAIQL,oBAAS,GAJjB,mBAIjBM,EAJiB,KAIPC,EAJO,OAKIP,mBAAS,CAAC,QAAS,UALvB,mBAKjBQ,EALiB,KAKTC,EALS,KA+DxB,OArCAC,qBAAU,WACRC,IAASC,YAAcC,yFAelBZ,GAdiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACzBF,EAAM,IAAIU,IAASG,IAAI,CAC3BC,UAAWZ,EAAaa,QACxBnB,MAAO,qCACPoB,OAAQT,EACRU,KAAM,KAGRjB,EAAIkB,GAAG,QAAQ,WACbjB,EAAOD,GACPA,EAAImB,YAIEC,CAAc,CAAEnB,SAAQC,iBAClCI,GAAY,KAEX,CAACN,EAAKJ,IAETa,qBAAU,WACHJ,GACHL,EAAII,SAAJ,iCAAuCR,MAGxC,CAACA,IAEJa,qBAAU,WACHJ,IACHgB,QAAQC,IAAI,WAAYf,GACxBP,EAAIuB,UAAUhB,GACdP,EAAIwB,QAAQ,MAGb,CAACjB,IAEI,6BACN,4BAAQkB,QAAS,kBAxDjBJ,QAAQC,IAAI1B,QAEVQ,EADY,gBAAVR,EACO,YAEQ,cAAVA,EACE,WAEQ,aAAVA,EACE,eAGA,iBA6C4BA,GACvC,4BAAQ6B,QAAS,kBAAMjB,EAAU,CAAiB,GAAhBkB,KAAKC,UAAiBD,KAAKE,MAAMF,KAAKC,UAAY,GAAK,GAAoB,GAAhBD,KAAKC,UAAiBD,KAAKE,MAAMF,KAAKC,UAAY,GAAK,OAApJ,mBACA,yBAAKE,IAAK,SAAAC,GAAE,OAAK5B,EAAaa,QAAUe,GAAKlC,MAAOP,MCxElDA,EAAS,CACb0C,SAAS,UAYIC,MATf,WACE,OACE,yBAAKpC,MAAOP,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.989edf33.chunk.js","sourcesContent":["import React from 'react'\n\nconst styles = {\n    height: '60px',\n    width: '100vw',\n    padding: '10px',\n    textAlign: 'center',\n    fontSize: '30px',\n};\n\nconst Header = () => {\n    return (\n        <div style={styles}>\n            <header><b>Hvor vil du reise? </b> </header>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nconst styles = {\n  width: \"100%\",\n  height: \"calc(100vh - 80px)\",\n  position: \"absolute\"\n};\n\nconst MapboxGLMap = () => {\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n  const [style, setStyle] = useState(\"streets-v11\");\n  const [firstrun, setFirstRun] = useState(true);\n  const [number, setNumber] = useState([10.5476, 59.9134]);\n\n  const toggleStyle = () => {\n    console.log(style)\n    if (style === \"streets-v11\") {\n      setStyle(\"light-v10\")\n    }\n    else if (style === \"light-v10\") {\n      setStyle(\"dark-v10\")\n    }\n    else if (style === \"dark-v10\") {\n      setStyle(\"satellite-v9\")\n    }\n    else if (style === \"satellite-v9\") {\n      setStyle(\"streets-v11\")\n    }\n    else {\n      setStyle(\"streets-v11\")\n    }\n  }\n\n  useEffect(() => {\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n    const initializeMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n        center: number,\n        zoom: 10\n      });\n\n      map.on(\"load\", () => {\n        setMap(map);\n        map.resize();\n      });\n    };\n\n    if (!map) initializeMap({ setMap, mapContainer });\n    setFirstRun(false)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, style]);\n\n  useEffect(() => {\n    if (!firstrun) {\n      map.setStyle(`mapbox://styles/mapbox/${style}`);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [style]);\n\n  useEffect(() => {\n    if (!firstrun) {\n      console.log(\"number: \", number)\n      map.setCenter(number);\n      map.setZoom(5);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [number]);\n\n  return (<div>\n    <button onClick={() => toggleStyle()}>{style}</button>\n    <button onClick={() => setNumber([Math.random() * 90 * (Math.round(Math.random()) ? 1 : -1), Math.random() * 90 * (Math.round(Math.random()) ? 1 : -1)])}>Random location</button>\n    <div ref={el => (mapContainer.current = el)} style={styles} />\n  </div>)\n};\n\nexport default MapboxGLMap;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MapboxGLMap from \"./components/MapboxGLMap\";\n\nconst styles = {\n  overflow:'hidden'\n}\n\nfunction App() {\n  return (\n    <div style={styles}>\n      <Header/>\n      <MapboxGLMap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}